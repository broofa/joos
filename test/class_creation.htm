<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>
<head>
<script src="../joos.js"></script>
</head>
<body>
  <div id="log"></div>
  <script>
  function log(msg, color) {
    var nel = document.createElement('div');
    nel.innerHTML = msg;
    if (color) nel.style.color = color;
    document.getElementById('log').appendChild(nel);
  }

  function testEquals(v0, v1, msg) {
    if (self.console && console.log) console.log(msg);
    if (v0 == v1) return log('pass: ' + msg, '#070');
    log('fail: ' + msg + ' (expecting ' + v1 + ', got ' + v0 + ')', '#700');
  }

  window.onload = function() {
    log('FYI: Object.defineProperty == ' + Object.defineProperty, '#088')

    // Basic class creation tests
    log('Testing class creation');

    self.MyClass = joos.createClass({
      initialize$: function() {this.inited = 'MyClass';},
      initialize: function() {this.inited = 'a';},

      $_simpson: 'bart',
      $get$simpson: function() {return this._simpson + '!'},
      $set$simpson: function(val) {this._simpson = val;},

      get$getterOnly: function() {return 'get only';},
      set$setterOnly: function() {},

      _car: 'edsel',
      get$car: function() {return this._car + '!'},
      set$car: function(val) {this._car = val;},

      _apple: 'fuji',
      get$apple: function() {return this._apple + '!'},
      set$apple: function(val) {this._apple = val;},

      _null: null
    });

    testEquals(MyClass.inited, 'MyClass', 'static initializer called');
    testEquals(MyClass._simpson, 'bart', 'static var set');
    testEquals(MyClass.simpson, 'bart!', 'static getter works');
    MyClass.simpson = 'lisa';
    testEquals(MyClass.simpson, 'lisa!', 'static setter works');

    self.a = new MyClass();
    testEquals(a.car, 'edsel!', 'car getter');
    a.car = 'ford';
    testEquals(a.car, 'ford!', 'car setter');

    testEquals(a._apple, 'fuji', 'instance var set');
    testEquals(a.inited, 'a', 'instance initializer called');
    testEquals(a.apple, 'fuji!', 'getter works');
    a.apple = 'bar';
    testEquals(a.apple, 'bar!', 'setter works');

    // Class inheritance tests
    log('Testing subclass creation');

    self.MySubclass = joos.createClass({
      superclass$: MyClass,
      $BAR: 'BAR',
      initialize$: function() {this.inited = 'MySubclass';},
      initialize: function() {this.inited = 'b';},

      set$car: function(val) {this._car = val;},

      $_simpson: 'homer',
      $get$simpson: function() {return this._super() + '!'},
      $set$simpson: function(val) {this._super('!' + val);},

      _apple: 'braeburn',
      get$apple: function() {return this._super() + '!';},
      set$apple: function(val) {this._super('!' + val);},

      _null: null
    });

    testEquals(MySubclass.inited, 'MySubclass', 'static initializer called');
    testEquals(MySubclass._simpson, 'homer', 'static var set');
    testEquals(MySubclass.simpson, 'homer!!', 'static getter works');
    MySubclass.simpson = 'marge';
    testEquals(MySubclass.simpson, '!marge!!', 'static setter works');

    self.b = new MySubclass();
    testEquals(b.car, 'edsel!', 'car getter');
    b.car = 'ford';
    testEquals(b.car, 'ford!', 'car setter');

    testEquals(b._apple, 'braeburn', 'instance var set');
    testEquals(b.inited, 'b', 'instance initializer called');
    testEquals(b.apple, 'braeburn!!', 'getter works');
    b.apple = 'mcintosh';
    testEquals(b.apple, '!mcintosh!!', 'setter works');

    log('tests complete');
  }
  </script>
</body>
</html>
